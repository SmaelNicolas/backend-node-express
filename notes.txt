Node : Entorno de Ejecucion de JS orientado a eventos asincronos. Nos permite desarrollar aplicaciones escalables y de tiempo real.
> Escalable:  Su rendimiento se puede adaptar a medida que crece el uso de la aplicacion y recibe mas solicitudes.
> Tiempo Real: Establece una conexion bidireccional y dinamica entre el servidor y el cliente. Analiza los eventos que ocurren y reacciona de forma inmediata.
Node no es un lenguaje de programacion , no es un framework ni una libreria. Es un entorno de ejecucion.


Entorno de Ejecucion : Donde se ejecuta la aplicacion.

Evento sincrono : Bloquea la app . Tiene que terminar de ejecutarse para continuar.

Evento asincron : Se ejecuta en paralelo y no bloquea la app.

Arquitectura : Modelo cliente servidor. El cliente solicta recursos/acciones al servidor , quien respondera con la informacion correspondiente

Protocolo :Reglas que permite que dos o mas entidades se comuniquen y se entiendan.
> HTTP / HTTPS

Base de Datos : Conjunto de datos estructurados sobre un mismo contexto que se pueden consultar.

API : Interfaz entre programas (cliente-servidor) que nos va a permitir conectar la app en el navegador , con el servidor

Modulo : Es una funcionalidad que esta organizada en uno o varios archivos JS que puede ser reutilizada. Mas facil de entender y mantener. No repetir codigo y reutilizar"

Importar: Darle acceso a funciones y elementos definidos en otro Modulo

exportar : export.module.nombre = ...  y luego   para importar usar require(path)

modulos built-in : Modules que vienen incorporados con Node.(http,https , fs,os,path , ...)

module process: Provee informacion del proceso de node que se esta ejecutando.

process.argv = argumentos que se pasan en la linea de comandos ej   node app.js 6 7

High order programming = Pasar funciones como objetos a otras funciones . (Pasar como argumento)

setTimeout (Se ejectua desp de x tiempo)
setImmediate (Se ejecuta inmediatamente desp del codigo sincronico)
setInterval(se ejecuta cada x lapso de tiempo , indefinidamente)

modulo fs : Contiene funcionalidades para trabajar el sistema de archivos

throw detiene la ejecucion

npm init : inicializa package

JSON : JavaScript Object Notation , es un formato de texto basado en la notacion de objetos de JS. Los datos se representanc como clave-valor.

--save-dev : instalar paquetes para desarrollo

Evento asyncrono : No bloquea la ejecucion de la app.
Evento sincrono : Bloquea la ejecucion de la app hasta que finalize la tarea.

Emitters : Objetos que emiten eventos nombrados y llaman a funciones especificas cuando ocurren
Emitters son instancias de la clase EventEmitter.

Event Handler / Listener = funcion que maneja el evento.

.on() : recibe el nombre y una callback  .on("nombreEvento",()=>{}) .  Se ejecuta cuando se llama al evento con ese nombre.

Modelo cliente-servdor : se usa para acceder a intener y obtener recursos e informacion. El cliente realiza peticiones a un servidor que devuelve informacion solicitada.

Protocolo : Reglas que permiten transmitir la informacion entre dispositivos de una red.

HTTP: Hypertext Transfer Protocol

Solicitudes HTTP : Method, path , version , Headers , Body.

Body se envia en formato JSON , el body no se incluye en todos los metodos.

HTTPS: Agrega una capa extra de seguridad.

GET : Solicitar un recurso especifico
POST: Crear un recurso especifico
PUT : Modificar un recurso especifico
DELETE : Eliminar un recurso especifico

Hay mas , estos 4 son los mas usados ( C.R.U.D )

Respuestas HTTP : Incluyen un CODIGO , ESTADO , VERSION , HEADERS , BODY.

Codigos de respuesta : _ Informativoas ( 100-199)
                       _ Satisfactorias (200-299)
                       -Redirecciones (300-399)
                       -Error de los clientes (400-499)
                       -Error de los servidores (500-599)

                       > Mas comunes : 200 , 400 ,404 , 500.

Modulo http : Permite a Node.js transmitir informacion con el protocolo HTTP. Nos permite escribir un servidor que va a escuchar solicitudes.

Puerto : Ubicacion virtual del SO en la cual se puede accder a una app o a un proceso especifico que se este ejecutando.

URL : (Uniform Resource Locator) Direccion de un recurso en la web

Secciones de una url:
protocolo http / https
subidominio : www
dominio : nombre
dominio de nivel superior : .com .net .edu .gov etc
path
parametros de ruta : user/20
parametros query  search?q=mySearch
Los query vienen separados por  signo ? y se arman como clave-valor

Routing: Manejar las solicitudes del cliente en base a ciertos criterios
Criterios : Metodo de la solicitud (GET/POST/etc..) , PATH










